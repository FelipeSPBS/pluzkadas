import psycopg2
import time
import telebot
from telebot import types
import threading
import uuid
import requests
from constants import APIkey, groupId, plano1, plano2, plano3, plano4, PUSHINPAY_TOKEN, plano1DESC, plano2DESC, plano3DESC, plano4DESC, pack1, pack2, pack3

# Inicializa o bot
bot = telebot.TeleBot(APIkey)

# Fun√ß√£o para conex√£o com o PostgreSQL
def db_connection():
    return psycopg2.connect(
        dbname="upsell",  # Substitua pelo nome do seu banco de dados
        user="postgres",   # Substitua pelo seu usu√°rio
        password="hd1450", # Substitua pela sua senha
        host="localhost",  # Ou o endere√ßo do seu servidor
        port="5432"        # Porta padr√£o do PostgreSQL
    )

# Cria√ß√£o da tabela de usu√°rios e de vendas
def create_table():
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                chat_id INTEGER,
                nome TEXT,
                txid TEXT,
                expires INTEGER,
                plano TEXT,
                status TEXT DEFAULT 'N√£o assinante'
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS vendas (
                id SERIAL PRIMARY KEY,
                txid TEXT,
                user_id TEXT,
                plano TEXT,
                valor FLOAT,
                status TEXT DEFAULT 'N√£o Pago',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()


create_table()

# Fun√ß√£o para gerar link Pix
def genPixLinkNormal(value, uid):
    print(f"Tentando gerar c√≥digo Pix normal para o usu√°rio {uid} no valor de {value}.")
    idempotency_key = str(uuid.uuid4())
    
    url = 'https://api.pushinpay.com.br/api/pix/cashIn'
    headers = {
        "Authorization": f"Bearer {PUSHINPAY_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "value": value,
        "webhook_url": "http://seuservico.com/webhook",  # Atualize para o seu webhook
        "idempotency_key": idempotency_key
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code != 200:
            print(f"Erro ao chamar a API: {response.status_code} - {response.text}")
            raise Exception(f"Erro ao chamar a API: {response.status_code} - {response.text}")

        data = response.json()
        print("Dados recebidos da PushinPay:", data)

        if 'id' not in data or 'qr_code' not in data:
            raise Exception("Erro ao gerar o c√≥digo PIX, verifique a resposta da Pushin Pay API.")
        
        return data['qr_code'], data['id']

    except Exception as e:
        print(f"Erro ao gerar o link Pix: {e}")
        return None, None

# Gera o link de convite
def generate_invite_link():
    return "https://typebot.co/nayaraavipp"  # Altere pelo seu link real

# M√©todo para lidar com o comando Start
@bot.message_handler(commands=['start'])
def start(msg):
    user_id = str(msg.from_user.id)
    first_name = str(msg.from_user.first_name)
    chat_id = msg.chat.id

    print(f"User ID: {user_id}, Chat ID: {chat_id}, First Name: {first_name}")

    try:
        with db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
            data = cursor.fetchone()

            if data is None:
                cursor.execute("INSERT INTO users (user_id, chat_id, nome) VALUES (%s, %s, %s)", (user_id, chat_id, first_name))
                conn.commit()
                print("Usu√°rio inserido com sucesso.")
            else:
                print("Usu√°rio j√° existente.")

    except Exception as e:
        print(f"Ocorreu um erro ao inserir no banco de dados: {e}")

    welcome_user(chat_id)

    bot.send_message(chat_id, 
                    "Oi, meu bem! Tudo certinho? üòò\n\n"
                    "Estou super animada por ter voc√™ aqui comigo! ü•∞ Me chamam de Nayara, tenho 18 aninhos, e minha miss√£o √© te proporcionar o m√°ximo de prazer... üòèüíñ\n\n"
                    "Pra te deixar ainda mais feliz, preparei uma oferta irresist√≠vel que s√≥ vale pelos pr√≥ximos 5 minutinhos! ‚è∞‚ú®\n"
                    "De R$49,90 por apenas R$18,97! üòçüî•\n\n"
                    "N√£o perde essa chance √∫nica! Clica aqui embaixo e vem se divertir muito comigo, sem limites para os nossos desejos... üî•",
                     reply_markup=showPlansButton()
                    )

# Fun√ß√£o para mostrar planos promocionais
def showPromotionPlansButton():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(
        types.InlineKeyboardButton(f"{plano1DESC['name']} - R$ {plano1DESC['price'] / 100:.2f}", callback_data=f"{plano1DESC['price']}-promo"),
        types.InlineKeyboardButton(f"{plano2DESC['name']} - R$ {plano2DESC['price'] / 100:.2f}", callback_data=f"{plano2DESC['price']}-promo"),
        types.InlineKeyboardButton(f"{plano3DESC['name']} - R$ {plano3DESC['price'] / 100:.2f}", callback_data=f"{plano3DESC['price']}-promo"),
        types.InlineKeyboardButton(f"{plano4DESC['name']} - R$ {plano4DESC['price'] / 100:.2f}", callback_data=f"{plano4DESC['price']}-promo"),
    )
    return markup

# Envia as op√ß√µes de promo√ß√£o para usu√°rios expirados
def sendPromotionOptions(chat_id):
    print(f"Enviando promo√ß√µes para {chat_id}...")
    promotion_markup = showPromotionPlansButton()  # Chame a fun√ß√£o para obter os bot√µes promocionais
    
    try:
        bot.send_message(chat_id, "üí• Seu acesso expirou. üí•\n\nEscolha um dos planos promocionais abaixo para reativar seu acesso √†s minhas ofertas especiais:", reply_markup=promotion_markup)
    except Exception as e:
        print(f"Erro ao enviar promo√ß√µes para {chat_id}: {e}")

# Callback para lidar com promo√ß√µes
@bot.callback_query_handler(func=lambda cb: 'promo' in cb.data)
def handlePromotion(cb):
    user_id = str(cb.from_user.id)
    value = cb.data.split('-')[0]  # Obt√©m o valor do plano promocional em centavos
    value_cents = int(value)

    # Enviar uma resposta imediata ao callback
    bot.answer_callback_query(cb.id, text="Gerando c√≥digo PIX...")

    print(f"Usu√°rio {user_id} tentou acessar o plano promocional de {value_cents} centavos.")
    
    # Tente gerar o Pix
    success = generate_pix_and_notify(value_cents, user_id, cb.message.chat.id)
    if success:
        print("Pix gerado e enviado com sucesso para o plano promocional.")
    else:
        print("Falha ao gerar o Pix para o plano promocional.")

# Bot√£o para mostrar planos dispon√≠veis
def showPlansButton():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("OBTER OFERTA", callback_data="view_plans"))
    return markup

# Visualiza planos
@bot.callback_query_handler(func=lambda cb: cb.data == "view_plans")
def viewPlans(cb):
    print("Visualizando planos...")
    bot.send_message(cb.message.chat.id, 'Quase l√° vida, agora √© s√≥ escolher o plano pra ver TUDO ü´¶\n' 'Selecione um Plano', reply_markup=choosePlan())

# Escolha de planos
def choosePlan():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    
    markup.add(
        types.InlineKeyboardButton(f"    {plano1['name']} - R$ {plano1['price'] / 100:.2f}    ", callback_data=f"{plano1['price']}-plan"),
        types.InlineKeyboardButton(f"    {plano2['name']} - R$ {plano2['price'] / 100:.2f}    ", callback_data=f"{plano2['price']}-plan"),
        types.InlineKeyboardButton(f"    {plano3['name']} - R$ {plano3['price'] / 100:.2f}    ", callback_data=f"{plano3['price']}-plan"),
        types.InlineKeyboardButton(f"    {plano4['name']} - R$ {plano4['price'] / 100:.2f}    ", callback_data=f"{plano4['price']}-plan"),
    )
    return markup

# Gera o bot√£o "Checkar Pagamento"
@bot.callback_query_handler(func=lambda cb: cb.data == "checkMyPayment")
def checkPayment(cb):
    chat_id = cb.message.chat.id
    user_id = str(cb.from_user.id)

    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT txid FROM users WHERE user_id = %s", (user_id,))
        txid = cursor.fetchone()

        if txid is None:
            bot.send_message(chat_id, "Nenhuma transa√ß√£o encontrada.")
            return

        txid = txid[0]
        status = checkTransaction(txid)

        # Verifica o status da transa√ß√£o
        if status[0] == "paid":
            # Se pago, envia o link de convite para o grupo
            invite_link = generate_invite_link()
            bot.send_message(chat_id, f"üéâ Parab√©ns! Seu pagamento foi confirmado!\n\nüëâ Acesse o grupo com o link: {invite_link}")
            checkSpecificTransaction(chat_id, txid)
            # Obtendo o primeiro nome do usu√°rio pra enviar na proposta
            first_name = cb.from_user.first_name
            # proposta depois do envio do link de convite
            send_proposal(chat_id, first_name)
        else:
            # Se n√£o pago, informa o usu√°rio e avisa para aguardar
            bot.send_message(chat_id, "A transa√ß√£o ainda n√£o foi paga. Confira o app do banco ou continue aguardando...")
            # Inicia a contagem regressiva de 10 minutos para enviar uma mensagem de follow-up
            threading.Thread(target=follow_up_payment_check, args=(chat_id, txid)).start()

# Fun√ß√£o para verificar o pagamento ap√≥s um tempo
def follow_up_payment_check(chat_id, txid):
    time.sleep(600)  # Aguardar 10 minutos (600 segundos)
    status = checkTransaction(txid)
    promotion_markup = showPromotionPlansButton()

    try:
        if status[0] == "paid":
            invite_link = generate_invite_link()
            bot.send_message(chat_id, f"üéâ Seu pagamento foi confirmado ap√≥s verifica√ß√£o adicional!\n\nüëâ Acesse o grupo com o link: {invite_link}")
            checkSpecificTransaction(chat_id, txid)
        else:
           
            bot.send_message(
                chat_id,
                " *Poxa gatinho, voc√™ me deixou esperando... Mas vamos fazer assim, eu vou te dar um descontinho em qualquer plano que voc√™ quiser!* \n\n"
                "üî• [PAGUE COM PIX E RECEBA O CONT√âUDO NA HORA] üî•\n\n"
                "üéÅ *10 grupos exclusivos!*\n"
                "üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë© *Millfs*\n"
                "üëô *Peitudas*\n"
                "üçë *Gordinhas*\n"
                "...e muito mais!\n\n"
                "üî• *Garanta agora seu acesso e aproveite TUDO!* üî•\n\n"
                "üíé *+500 M√çDIAS DO MEU ONLYFANS*\n", 
                parse_mode="Markdown", 
                reply_markup=promotion_markup
            )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Erro ao enviar mensagem para o chat {chat_id}: {e}")

# Converte dias para segundos
def daysToSeconds(days):
    return days * 24 * 60 * 60

def welcome_user(chat_id):
    # Enviando a imagem
    with open("Apresenta-Cliente01.jpg", "rb") as image:
        bot.send_photo(chat_id, image)


def videozin(chat_id):
    with open("Donwsell-Cliente01.mp4", "rb") as video:
        bot.send_video(chat_id, video)

# Fun√ß√£o para gerar o Pix e notificar o usu√°rio
def generate_pix_and_notify(value_cents, user_id, chat_id):
    print("Tentando gerar o c√≥digo Pix...")
    qr_code, txid = genPixLinkNormal(value_cents, user_id)
    if qr_code is None or txid is None:
        print("Erro: n√£o foi poss√≠vel gerar o QR code ou txid.")
        bot.send_message(chat_id, "‚ùå Erro ao gerar o link Pix, tente novamente mais tarde.")
        return False

    try:
        with db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET txid = %s WHERE user_id = %s", (txid, user_id))
            conn.commit()
            print("TXID armazenado com sucesso no banco de dados.")

            # Inserir venda na tabela vendas
            plano = "plano_exemplo"  # Defina como voc√™ deseja obter o nome do plano
            valor = value_cents / 100  # Converte centavos para valor em reais
            cursor.execute("INSERT INTO vendas (txid, user_id, plano, valor, status) VALUES (%s, %s, %s, %s, %s)",
                           (txid, user_id, plano, valor, 'N√£o Pago'))  # Status inicial como "N√£o Pago"
            conn.commit()
            print("Venda registrada com sucesso na tabela 'Vendas'.")
    except Exception as e:
        print(f"Erro ao armazenar txid no banco de dados: {e}")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Encaminhar C√≥digo Pix", switch_inline_query=f"{qr_code}"))

    bot.send_message(
        chat_id,
        "‚úÖ <b>Prontinho</b>\n\n"
        "Para pagar, clique na chave Pix abaixo ‚¨áÔ∏è para copiar e pague no app do seu banco\n\n"
        "‚Äº <b>Utilize a op√ß√£o PIX Copia e Cola</b> no seu aplicativo banc√°rio "
        "(ou pagamento via QR CODE em alguns bancos)",
        "üîπ <b>Clique abaixo para copiar</b> üîπ",
        parse_mode="HTML"
    )

    bot.send_message(
        chat_id,
        
        f"<code>{qr_code}</code>",
        parse_mode="HTML",
        reply_markup=markup
    )

    # Gera o bot√£o "Checkar Pagamento"
    check_payment_markup = types.InlineKeyboardMarkup()
    check_payment_markup.add(types.InlineKeyboardButton("Receber Link", callback_data="checkMyPayment"))

    bot.send_message(
        chat_id,
        "‚ö† <b>Importante!</b> Ap√≥s o pagamento, volte nesta tela para receber o link de acesso.\n\n"
        "‚è∞ Aguarde alguns instantes para que nosso sistema receba a confirma√ß√£o do seu pagamento pelo banco.\n\n"
        "Ap√≥s concluir o pagamento, clique no bot√£o \"<b>Receber Link</b>\" abaixo ‚¨áÔ∏è.",
        parse_mode="HTML",
        reply_markup=check_payment_markup
    )

    # Iniciar a verifica√ß√£o de pagamento ap√≥s 10 segundos
    threading.Thread(target=follow_up_payment_check, args=(chat_id, txid)).start()
    return True

# Checar status da transa√ß√£o
def checkTransaction(txid):
    if txid is None:
        return ['not_found', 0]

    url = f'https://api.pushinpay.com.br/api/transactions/{txid}'
    headers = {
        "Authorization": f"Bearer {PUSHINPAY_TOKEN}",
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"Erro ao checar transa√ß√£o: {response.status_code} - {response.text}")
        return ['not_found', 0]

    try:
        data = response.json()
        print("Dados da transa√ß√£o:", data)
    except ValueError:
        print("Resposta n√£o est√° em formato JSON: " + response.text)
        return ['not_found', 0]

    if 'status' not in data:
        return ['not_found', 0]

    return [data['status'], float(data.get('value', 0))]

# Checar status da transa√ß√£o espec√≠fica
def checkSpecificTransaction(chat_id, txid):
    try:
        print(f"Verificando status da transa√ß√£o para txid: {txid}")
        status = checkTransaction(txid)

        if status[0] == "paid":  # Verifica se a transa√ß√£o foi paga
            with db_connection() as conn:
                cursor = conn.cursor()
                # Define a expira√ß√£o para 30 dias
                expires = int(time.time()) + daysToSeconds(30)
                
                # Atualize o status do usu√°rio e a expira√ß√£o
                cursor.execute("UPDATE users SET status = 'Assinante', expires = %s WHERE txid = %s", (expires, txid))
                print(f"Usu√°rio {chat_id} atualizado para Assinante com expires = {expires}")

                # Atualize tamb√©m o plano, se necess√°rio
                plan_name = "nome_do_plano"  # Aqui voc√™ deve obter o nome real do plano, talvez de um par√¢metro
                cursor.execute("UPDATE users SET plano = %s WHERE txid = %s", (plan_name, txid))

                # Atualiza a situa√ß√£o da venda
                cursor.execute("UPDATE vendas SET status = 'Pago' WHERE txid = %s", (txid,))
                conn.commit()
                print(f"Venda atualizada para pago para txid: {txid}")

            invite_link = generate_invite_link()
            bot.send_message(chat_id, f"üéâ Parab√©ns! Voc√™ agora √© um Assinante!\nüëâ Acesse o grupo com o link de convite: {invite_link}")
            print("Usu√°rio promovido a Assinante:", chat_id)

        else:
            print(f"Transa√ß√£o n√£o paga ou com status: {status[0]}")

    except Exception as e:
        bot.send_message(chat_id, f"Erro ao verificar a transa√ß√£o: {e}")
        print(f"Erro ao verificar a transa√ß√£o para {chat_id}: {e}")

# Fun√ß√µes para gerenciamento de promo√ß√µes
def ShowPacksPlans():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(
        types.InlineKeyboardButton(f"{pack1['name']} - R$ {pack1['price'] / 100:.2f}", callback_data=f"{pack1['price']}-promo"),
        types.InlineKeyboardButton(f"{pack2['name']} - R$ {pack2['price'] / 100:.2f}", callback_data=f"{pack2['price']}-promo"),
        types.InlineKeyboardButton(f"{pack3['name']} - R$ {pack3['price'] / 100:.2f}", callback_data=f"{pack3['price']}-promo"),
    )
    return markup

@bot.message_handler(commands=['proposta'])  # Comando para enviar a proposta
def handle_proposal(msg):
    chat_id = msg.chat.id
    first_name = msg.from_user.first_name  # Obtendo o primeiro nome do usu√°rio
    send_proposal(chat_id, first_name)  # Passa o nome para a fun√ß√£o send_proposal

def send_proposal(chat_id, first_name):
    message = (
        f"Oiee, {first_name}! Tudo bem? üòò\n\n"  
        "Que bom ter voc√™ no meu GRUPINHO DE PR√âVIAS üîû! Te trouxe aqui para te fazer uma oferta especial ‚ò∫Ô∏è "
        "Tenho um conte√∫do √∫nico que n√£o envio no VIP, mas posso liberar pra voc√™... üòàüî•\n\n"
        "Voc√™ ter√° acesso a:\n"
        "üíé V√çDEOS IN√âDITOS üíé\n"
        "üíé SURPRESA NO PRIVADO üíé\n"
        "üî• MEU WHATSAPP EXCLUSIVO üî•\n\n"
        "TUDO POR R$ 14,99\n\n"
        "Ou ser√° que vai me deixar esperando? Te aguardo ‚ò∫Ô∏èüëá"
    )

    bot.send_message(chat_id, message, reply_markup=ShowPacksPlans())
    print(f'Upsell enviado corretamente')

def unban_after_delay(user_id, delay=60):  # Define o delay em segundos
    time.sleep(delay)
    try:
        bot.unban_chat_member(groupId, user_id)
        print(f'Usu√°rio {user_id} desbanido.')
    except Exception as e:
        print(f'Erro ao desbanir o usu√°rio {user_id}: {e}')

@bot.callback_query_handler(func=lambda cb: 'plan' in cb.data)
def handlePlanSelection(cb):
    user_id = str(cb.from_user.id)
    value = cb.data.split('-')[0]  # Obt√©m o valor do plano em centavos
    value_cents = int(value)

    # Responder imediatamente saindo do callback
    bot.answer_callback_query(cb.id, text="Gerando c√≥digo PIX...")
    print(f"Usu√°rio {user_id} selecionou o plano de {value_cents} centavos.")

    # Chamada da fun√ß√£o para gerar o Pix
    success = generate_pix_and_notify(value_cents, user_id, cb.message.chat.id)
    if success:
        print("Pix gerado e enviado com sucesso.")
    else:
        print("Falha ao gerar o Pix.")

# Fun√ß√£o para verificar se um membro √© autorizado ao entrar no grupo
# TODO: Implementar fun√ß√£o se necess√°rio

# Atualizando o loop principal
def kickPeople():
    while True:
        try:
            # kickUnauthorizedMembers()  # Verifica usu√°rios n√£o autorizados
            # kickExpiredMembers()        # Verifica e atualiza usu√°rios expirados
            time.sleep(6600)       # Checa a cada 3 horas
        except Exception as e:
            print(f'Erro no kickPeople: {e}')
            time.sleep(60)

def is_user_interacted(chat_id):
    # Implementar l√≥gica para verificar se o usu√°rio interagiu, por exemplo, conferindo se o chat_id est√° na tabela de usu√°rios
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT EXISTS(SELECT 1 FROM users WHERE chat_id = %s)", (chat_id,))
        return cursor.fetchone()[0]
    
def has_interacted(chat_id):
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT EXISTS(SELECT 1 FROM users WHERE chat_id = %s)", (chat_id,))
        return cursor.fetchone()[0]

def sendPromo(chat_id):
    print(f"Enviando promo√ß√µes para {chat_id}...")
    promotion_markup = showPromotionPlansButton()

    try:
        videozin(chat_id)
        bot.send_message(
            chat_id,
            "‚ú® Promo√ß√£o Exclusiva! ‚ú®\n\n"
            "Que tal aproveitar nossas condi√ß√µes especiais mais uma vez? üî•\n"
            "Escolha um dos planos com desconto abaixo e garanta seu acesso agora mesmo! ‚¨áÔ∏è",
            reply_markup=promotion_markup
        )
        print(f"Promo√ß√£o enviada para {chat_id}.")
    except Exception as e:
        print(f"Erro ao enviar promo√ß√µes para {chat_id}: {e}")

def PROMO():
    while True:
        try:
            with db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT chat_id FROM users")
                users = cursor.fetchall()

                for user in users:
                    chat_id = user[0]
                    if has_interacted(chat_id):
                        sendPromo(chat_id)
                    else:
                        print(f"Usu√°rio {chat_id} n√£o interagiu com o bot, pulando...")
                    time.sleep(2)  # Tempo de espera entre envios

            time.sleep(7200)  # Espera antes de come√ßar de novo

        except Exception as e:
            print(f'Erro ao enviar promo√ß√µes: {e}')

if __name__ == '__main__':
    print("Iniciando o bot...")
    
    # Inicia a thread para enviar promo√ß√µes
    promo_sender = threading.Thread(target=PROMO)
    promo_sender.start()

    # Inicia o polling do bot para receber mensagens e intera√ß√µes
    try:
        print("Bot em execu√ß√£o...")
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Erro ao iniciar o bot: {e}")

# Fun√ß√£o para desbanir um usu√°rio
def unbanUser(user_id):
    try:
        bot.unban_chat_member(groupId, user_id)
        with db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET status = 'Assinante' WHERE user_id = %s", (user_id,))
            conn.commit()
            print(f'Usu√°rio {user_id} desbanido e promovido a Assinante.')
    except Exception as e:
        print(f'Erro ao desbanir o usu√°rio {user_id}: {e}')

try:
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, expires FROM users WHERE expires IS NOT NULL OR status = 'N√£o assinante'")
        expired_users = cursor.fetchall()

        for user in expired_users:
            user_id, expires = user
            if expires is None or expires < int(time.time()):
                print(f'Alterando status do usu√°rio {user_id}, acesso expirado.')

                # Tente obter o chat_id para enviar mensagem
                chat_id = None
                try:
                    cursor.execute("SELECT chat_id FROM users WHERE user_id = %s", (user_id,))
                    chat_id = cursor.fetchone()[0]
                except Exception as e:
                    print(f'Erro ao obter chat_id para o usu√°rio {user_id}: {e}')

                if chat_id is not None:
                    # Mensagem de expira√ß√£o com planos promocionais
                    sendPromotionOptions(chat_id)

                    # Banir o usu√°rio
                    bot.ban_chat_member(groupId, user_id)
                    print(f'Usu√°rio {user_id} banido com sucesso.')

                # Atualiza para n√£o assinante
                cursor.execute("UPDATE users SET status = 'N√£o assinante', expires = NULL WHERE user_id = %s", (user_id,))

        conn.commit()

except Exception as e:
    print(f'Erro ao verificar membros expirados: {e}')
